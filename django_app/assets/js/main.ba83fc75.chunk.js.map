{"version":3,"sources":["components/Header.js","app.config.js","components/UserCard.js","components/Spinner.js","components/UsersList.js","helpers.js","components/UserForm.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleForm","bind","assertThisInitialized","toggleForm","id","email","react_default","a","createElement","className","href","onClick","Component","config","rest","users","UserCard","deleteUser","user","_this2","fetch","method","then","response","ok","fetchUsers","alert","type","Spinner","role","UsersList","loading","components_Spinner","margin","length","map","components_UserCard","key","class","getCookie","name","cookieValue","document","cookie","cookies","split","i","trim","substring","decodeURIComponent","UserForm","handleSubmit","handleClose","state","e","preventDefault","form","FormData","target","get","_sendFormData","uri","setState","body","JSON","stringify","headers","Accept","Content-Type","X-CSRFToken","json","msg","catch","error","Error","Fragment","onSubmit","htmlFor","value","defaultValue","App","listLoading","formUser","renderForm","responseData","r","userJson","components_Header","src_components_UserForm","components_UsersList","Boolean","window","location","hostname","match","ReactDOM","render","components_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ba83fc75.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.handleForm = this.handleForm.bind(this);\n  }\n\n  handleForm() {\n    this.props.toggleForm({ id: 0, email: \"\" });\n  }\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark bg-dark fixed-top\">\n        <h5 className=\"navbar-brand\">Users</h5>\n        <ul className=\"navbar-nav mr-auto\">\n          <li className=\"nav-item\">\n            <a className=\"nav-link\" href=\"#\" onClick={this.handleForm}>\n              Add user\n            </a>\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nHeader.propTypes = {\n  toggleForm: PropTypes.func,\n};\n\nexport default Header;\n","const config = {\n  rest: {\n    users: 'http://localhost:8000/api/user/'\n    //users: 'https://randomuser.me/api/?nat=us&results=20'\n  }\n};\n\nexport default config;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport config from \"../app.config.js\";\n\nclass UserCard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleForm = this.handleForm.bind(this);\n    this.deleteUser = this.deleteUser.bind(this);\n  }\n\n  handleForm() {\n    this.props.toggleForm(this.props.user);\n  }\n\n  deleteUser(id) {\n    fetch(config.rest.users + this.props.user.id + \"/\", {\n      method: \"DELETE\",\n    }).then((response) => {\n      if (!response.ok) {\n        alert(\"Something wrong has happened. Please, try again.\");\n        return;\n      }\n      this.props.fetchUsers();\n    });\n  }\n  render() {\n    return (\n      <div className=\"card m-3\">\n        <div className=\"card-header\">\n          <span className=\"align-middle\">#{this.props.user.id}</span>\n          <div className=\"float-right\">\n            <button\n              type=\"button\"\n              onClick={this.handleForm}\n              className=\"btn btn-info btn-sm mr-2\"\n            >\n              Edit\n            </button>\n            <button\n              type=\"button\"\n              onClick={this.deleteUser}\n              className=\"btn btn-danger btn-sm\"\n            >\n              Delete\n            </button>\n          </div>\n        </div>\n        <div className=\"card-body\">\n          <p className=\"card-text\">{this.props.user.email}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nUserCard.propTypes = {\n  user: PropTypes.object.isRequired,\n  toggleForm: PropTypes.func,\n  fetchUsers: PropTypes.func,\n};\n\nexport default UserCard;\n","import React, { Component } from \"react\";\n\nclass Spinner extends Component {\n  render() {\n    return (\n      <div className=\"d-flex justify-content-center mt-5\">\n        <div className=\"spinner-border text-primary\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Spinner;\n","import React, { Component } from \"react\";\nimport UserCard from \"./UserCard\";\nimport Spinner from \"./Spinner\";\nimport PropTypes from \"prop-types\";\n\nclass UsersList extends Component {\n  render() {\n    return (\n      <div className=\"container mt-5\">\n        <div className=\"row\">\n          <div className=\"col-8 offset-2 mt-3\">\n            {this.props.loading ? (\n              <Spinner margin={true} />\n            ) : this.props.users.length > 0 ? (\n              this.props.users.map((user) => {\n                return (\n                  <UserCard\n                    key={user.id}\n                    user={user}\n                    fetchUsers={this.props.fetchUsers}\n                    toggleForm={this.props.toggleForm}\n                  />\n                );\n              })\n            ) : (\n              <h4 class=\"lead text-center mt-4\">No users found</h4>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nUsersList.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  users: PropTypes.array.isRequired,\n  fetchUsers: PropTypes.func,\n  toggleForm: PropTypes.func,\n};\n\nexport default UsersList;\n","function parseUser(userJson) {\n  return {\n    id: userJson.id,\n    //id: userJson.id.value,\n    email: userJson.email\n  };\n}\n\nexport function parseResponseJson(json) {\n  return json.map(r => parseUser(r));\n  //return json.results.map(r => parseUser(r));\n}\n\nexport function getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i].trim()\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Spinner from \"./Spinner\";\nimport \"./UserForm.css\";\nimport config from \"../app.config.js\";\nimport { getCookie } from \"../helpers.js\";\n\nclass UserForm extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.state = {\n      loading: false,\n      response: \"\",\n      user: this.props.user,\n    };\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    var form = new FormData(e.target),\n      user = {\n        id: form.get(\"id\"),\n        email: form.get(\"email\"),\n      };\n    if (user.id !== \"0\") {\n      this._sendFormData(config.rest.users + user.id + \"/\", \"PUT\", user);\n    } else {\n      this._sendFormData(config.rest.users, \"POST\", { email: user.email });\n    }\n  }\n\n  _sendFormData(uri, method, user) {\n    this.setState({\n      loading: true,\n    });\n    fetch(uri, {\n      method: method,\n      body: JSON.stringify(user),\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCookie(\"csrftoken\"),\n      },\n    }).then((response) => {\n      if (!response.ok) {\n        response\n          .json()\n          .then((msg) => {\n            this.setState({\n              loading: false,\n              response: \"Email: \" + msg[\"email\"][0],\n            });\n          })\n          .catch((error) => {\n            this.setState({\n              loading: false,\n              response: \"Something wrong has happened. Please, try again.\",\n            });\n          });\n        throw Error(response);\n      }\n      this.handleClose();\n      this.props.fetchUsers();\n    });\n  }\n\n  handleClose() {\n    this.setState({\n      loading: false,\n      response: \"\",\n    });\n    this.props.toggleForm({ id: 0, email: \"\" });\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"overlay fixed-bottom\" onClick={this.handleClose} />\n        <div className=\"UserFrom col-md-4 offset-md-4\">\n          <div className=\"card shadow\">\n            <div className=\"card-body\">\n              <form onSubmit={this.handleSubmit}>\n                <div className=\"form-group\">\n                  <label htmlFor=\"userEmail\">Email address</label>\n                  <input type=\"hidden\" name=\"id\" value={this.state.user.id} />\n                  <input\n                    className=\"form-control\"\n                    name=\"email\"\n                    defaultValue={this.state.user.email}\n                  />\n                  <small id=\"emailHelp\" className=\"form-text text-muted\">\n                    Type a valid email address.\n                  </small>\n                </div>\n                {this.state.loading ? (\n                  <Spinner />\n                ) : (\n                  <div>\n                    <button type=\"submit\" className=\"btn btn-primary\">\n                      Submit\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={this.handleClose}\n                      className=\"btn ml-3 btn-danger\"\n                    >\n                      Cancel\n                    </button>\n                  </div>\n                )}\n              </form>\n              {!!this.state.response & !this.state.loading ? (\n                <div role=\"alert\" className=\"alert mt-3 alert-danger\">\n                  {this.state.response}\n                </div>\n              ) : (\n                <p />\n              )}\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\nUserForm.propTypes = {\n  user: PropTypes.object.isRequired,\n  fetchUsers: PropTypes.func,\n  toggleForm: PropTypes.func,\n};\n\nexport default UserForm;\n","import Header from \"./Header\";\nimport UsersList from \"./UsersList\";\nimport UserForm from \"./UserForm\";\n\nimport config from \"../app.config.js\";\nimport React, { Component } from \"react\";\nimport { parseResponseJson } from \"../helpers.js\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      listLoading: false,\n      formUser: { id: 0, email: \"\" },\n      renderForm: false,\n      users: [],\n    };\n    this.toggleForm = this.toggleForm.bind(this);\n    this.fetchUsers = this.fetchUsers.bind(this);\n  }\n\n  toggleForm(user) {\n    this.setState({\n      formUser: user,\n      renderForm: !this.state.renderForm,\n    });\n  }\n\n  componentWillMount() {\n    this.fetchUsers();\n  }\n\n  fetchUsers() {\n    this.setState({\n      listLoading: true,\n    });\n    fetch(config.rest.users)\n      .then((response) => response.json())\n      .then((responseData) => {\n        this.setState({\n          listLoading: false,\n          users: parseResponseJson(responseData),\n        });\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <Header toggleForm={this.toggleForm} />\n\n        {this.state.renderForm ? (\n          <UserForm\n            user={this.state.formUser}\n            toggleForm={this.toggleForm}\n            fetchUsers={this.fetchUsers}\n          />\n        ) : null}\n\n        <UsersList\n          fetchUsers={this.fetchUsers}\n          loading={this.state.listLoading}\n          users={this.state.users}\n          toggleForm={this.toggleForm}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}