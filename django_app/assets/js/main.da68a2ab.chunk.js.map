{"version":3,"sources":["components/Header.js","components/UserCard.js","components/Spinner.js","components/UsersList.js","app.config.js","components/App.js","helpers.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","href","Component","UserCard","this","props","id","email","Spinner","role","UsersList","loading","components_Spinner","users","length","map","user","components_UserCard","key","config","rest","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","fetchUsers","_this2","setState","fetch","then","response","json","responseData","console","log","r","userJson","components_Header","components_UsersList","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAceA,mLAVX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAAK,KAAjC,sBAJaC,aCmBNC,mLAhBX,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,IAA+BI,KAAKC,MAAMC,IAC1CT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAaI,KAAKC,MAAME,gBANxBL,aCWRM,mLAVX,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BAA8BS,KAAK,UAChDZ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,uBALYE,aCgCPQ,mLA3BX,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACZI,KAAKC,MAAMM,QACVd,EAAAC,EAAAC,cAACa,EAAD,MACER,KAAKC,MAAMQ,MAAMC,OAAS,EAC5BV,KAAKC,MAAMQ,MAAME,IAAI,SAACC,GACpB,OACEnB,EAAAC,EAAAC,cAACkB,EAAD,CAAUC,IAAKF,EAAKV,GAAIA,GAAIU,EAAKV,GAAIC,MAAOS,EAAKT,UAIrDV,EAAAC,EAAAC,cAAA,qCAfUG,aCCTiB,EANA,CACbC,KAAM,CACJP,MAAO,wCC2CIQ,cArCb,SAAAA,EAAYhB,GAAO,IAAAiB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAnB,KAAAiB,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAnB,KAAAmB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAvB,KAAMC,KACDuB,MAAQ,CACXjB,SAAS,EACTE,MAAO,IAJQS,oFASjBlB,KAAKyB,kDAGM,IAAAC,EAAA1B,KACXA,KAAK2B,SAAS,CACZpB,SAAS,IAEXqB,MAAMb,EAAOC,KAAKP,OACfoB,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAACG,GCnBN,IAA2BD,EDoB1BE,QAAQC,IAAIF,GACZN,EAAKC,SAAS,CACZpB,SAAS,EACTE,OCvBwBsB,EDuBCC,ECtB1BD,EAAKpB,IAAI,SAAAwB,GAAC,MAPV,CACLjC,IAFekC,EAQcD,GANhBjC,GACbC,MAAOiC,EAASjC,OAHpB,IAAmBiC,0CDoCf,OACE3C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0C,EAAD,MACA5C,EAAAC,EAAAC,cAAC2C,EAAD,CAAW/B,QAASP,KAAKwB,MAAMjB,QAASE,MAAOT,KAAKwB,MAAMf,gBAhChDX,aEKEyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAACuB,GAClCA,EAAaC","file":"static/js/main.da68a2ab.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-light bg-light fixed-top\">\n        <a className=\"navbar-brand\" href=\"#\">\n          Users List\n        </a>\n      </nav>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass UserCard extends Component {\n  render() {\n    return (\n      <div className=\"card m-3\">\n        <div className=\"card-header\">#{this.props.id}</div>\n        <div className=\"card-body\">\n          <p className=\"card-text\">{this.props.email}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nUserCard.propTypes = {\n  id: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n};\n\nexport default UserCard;\n","import React, { Component } from \"react\";\n\nclass Spinner extends Component {\n  render() {\n    return (\n      <div className=\"d-flex justify-content-center mt-5\">\n        <div className=\"spinner-border text-primary\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Spinner;\n","import React, { Component } from \"react\";\nimport UserCard from \"./UserCard\";\nimport Spinner from \"./Spinner\";\nimport PropTypes from \"prop-types\";\n\nclass UsersList extends Component {\n  render() {\n    return (\n      <div className=\"container mt-5\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            {this.props.loading ? (\n              <Spinner />\n            ) : this.props.users.length > 0 ? (\n              this.props.users.map((user) => {\n                return (\n                  <UserCard key={user.id} id={user.id} email={user.email} />\n                );\n              })\n            ) : (\n              <p>No users found</p>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nUsersList.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  users: PropTypes.array.isRequired,\n};\n\nexport default UsersList;\n","const config = {\n  rest: {\n    users: 'http://localhost:8000/api/user/'\n  }\n};\n\nexport default config;\n","import Header from \"./Header\";\nimport UsersList from \"./UsersList\";\n\nimport config from \"../app.config.js\";\nimport React, { Component } from \"react\";\nimport { parseResponseJson } from \"../helpers.js\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      users: [],\n    };\n  }\n\n  componentWillMount() {\n    this.fetchUsers();\n  }\n\n  fetchUsers() {\n    this.setState({\n      loading: true,\n    });\n    fetch(config.rest.users)\n      .then((response) => response.json())\n      .then((responseData) => {\n        console.log(responseData);\n        this.setState({\n          loading: false,\n          users: parseResponseJson(responseData),\n        });\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <UsersList loading={this.state.loading} users={this.state.users} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","function parseUser(userJson) {\n  return {\n    id: userJson.id,\n    email: userJson.email\n  };\n}\n\nexport function parseResponseJson(json) {\n  return json.map(r => parseUser(r));\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}