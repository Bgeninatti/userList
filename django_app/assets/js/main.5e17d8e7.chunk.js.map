{"version":3,"sources":["components/Header.js","components/UserCard.js","components/Spinner.js","components/UsersList.js","components/UserForm.js","app.config.js","helpers.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","_this","this","react_default","a","createElement","className","href","onClick","props","toggleForm","Component","UserCard","id","email","Spinner","role","UsersList","loading","components_Spinner","margin","users","length","map","user","components_UserCard","key","UserForm","isActive","onSubmit","handleSubmit","htmlFor","type","name","placeholder","isLoading","response","hasErrors","config","rest","getCookie","cookieValue","document","cookie","cookies","split","i","trim","substring","decodeURIComponent","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","state","formActive","formLoading","formUser","formResponse","fetchUsers","setState","_this2","fetch","then","json","responseData","r","userJson","_this3","method","body","JSON","stringify","get","headers","Accept","Content-Type","X-CSRFToken","ok","msg","catch","error","alert","statusText","Error","event","preventDefault","FormData","target","createUser","components_Header","src_components_UserForm","components_UsersList","Boolean","window","location","hostname","match","ReactDOM","render","components_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5e17d8e7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark bg-dark fixed-top\">\n        <h5 className=\"navbar-brand\">Users</h5>\n        <ul className=\"navbar-nav mr-auto\">\n          <li className=\"nav-item\">\n            <a\n              className=\"nav-link\"\n              href=\"#\"\n              onClick={() => this.props.toggleForm()}\n            >\n              Add user\n            </a>\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nHeader.propTypes = {\n  toggleForm: PropTypes.func,\n};\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass UserCard extends Component {\n  render() {\n    return (\n      <div className=\"card m-3\">\n        <div className=\"card-header\">#{this.props.id}</div>\n        <div className=\"card-body\">\n          <p className=\"card-text\">{this.props.email}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nUserCard.propTypes = {\n  id: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n};\n\nexport default UserCard;\n","import React, { Component } from \"react\";\n\nclass Spinner extends Component {\n  render() {\n    return (\n      <div className=\"d-flex justify-content-center mt-5\">\n        <div className=\"spinner-border text-primary\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Spinner;\n","import React, { Component } from \"react\";\nimport UserCard from \"./UserCard\";\nimport Spinner from \"./Spinner\";\nimport PropTypes from \"prop-types\";\n\nclass UsersList extends Component {\n  render() {\n    return (\n      <div className=\"container mt-5\">\n        <div className=\"row\">\n          <div className=\"col-8 offset-2 mt-3\">\n            {this.props.loading ? (\n              <Spinner margin={true} />\n            ) : this.props.users.length > 0 ? (\n              this.props.users.map((user) => {\n                return (\n                  <UserCard key={user.id} id={user.id} email={user.email} />\n                );\n              })\n            ) : (\n              <p>No users found</p>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nUsersList.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  users: PropTypes.array.isRequired,\n};\n\nexport default UsersList;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Spinner from \"./Spinner\";\nimport \"./UserForm.css\";\n\nclass UserForm extends Component {\n  render() {\n    return (\n      <div\n        className={\n          \"UserFrom col-xs-4 ml-2 \" + (this.props.isActive ? \"show\" : \"hidden\")\n        }\n      >\n        <div className=\"card shadow\">\n          <div className=\"card-header\">New User</div>\n          <div className=\"card-body\">\n            <form onSubmit={this.props.handleSubmit}>\n              <div className=\"form-group\">\n                <label htmlFor=\"userEmail\">Email address</label>\n                <input\n                  type=\"email\"\n                  className=\"form-control\"\n                  id=\"userEmail\"\n                  name=\"email\"\n                  placeholder=\"Enter email\"\n                />\n                <small id=\"emailHelp\" className=\"form-text text-muted\">\n                  Type a valid email address.\n                </small>\n              </div>\n              {this.props.isLoading ? (\n                <Spinner />\n              ) : (\n                <button type=\"submit\" className=\"btn btn-primary\">\n                  Submit\n                </button>\n              )}\n            </form>\n            {!!this.props.response & !this.props.isLoading ? (\n              <div\n                role=\"alert\"\n                className={\n                  \"alert mt-3 \" +\n                  (this.props.hasErrors ? \"alert-danger\" : \"alert-success\")\n                }\n              >\n                {this.props.response}\n              </div>\n            ) : (\n              <p />\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nUserForm.propTypes = {\n  isActive: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  hasErrors: PropTypes.bool.isRequired,\n  user: PropTypes.object.isRequired,\n  handleSubmit: PropTypes.func,\n  response: PropTypes.string,\n};\n\nexport default UserForm;\n","const config = {\n  rest: {\n    users: 'http://localhost:8000/api/user/'\n    //users: 'https://randomuser.me/api/?nat=us&results=20'\n  }\n};\n\nexport default config;\n","function parseUser(userJson) {\n  return {\n    id: userJson.id,\n    //id: userJson.id.value,\n    email: userJson.email\n  };\n}\n\nexport function parseResponseJson(json) {\n  return json.map(r => parseUser(r));\n  //return json.results.map(r => parseUser(r));\n}\n\nexport function getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i].trim()\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\n","import Header from \"./Header\";\nimport UsersList from \"./UsersList\";\nimport UserForm from \"./UserForm\";\n\nimport config from \"../app.config.js\";\nimport React, { Component } from \"react\";\nimport { parseResponseJson, getCookie } from \"../helpers.js\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleForm = this.toggleForm.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    this.state = {\n      loading: false,\n      formActive: false,\n      formLoading: false,\n      hasErrors: false,\n      formUser: {},\n      formResponse: \"\",\n      users: [],\n    };\n  }\n\n  componentWillMount() {\n    this.fetchUsers();\n  }\n\n  toggleForm() {\n    this.setState({ formActive: !this.state.formActive });\n  }\n\n  fetchUsers() {\n    this.setState({\n      loading: true,\n    });\n    fetch(config.rest.users)\n      .then((response) => response.json())\n      .then((responseData) => {\n        this.setState({\n          loading: false,\n          users: parseResponseJson(responseData),\n        });\n      });\n  }\n\n  createUser(user) {\n    this.setState({\n      formLoading: true,\n    });\n    fetch(config.rest.users, {\n      method: \"POST\",\n      body: JSON.stringify({ email: user.get(\"email\") }),\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCookie(\"csrftoken\"),\n      },\n    }).then((response) => {\n      if (!response.ok) {\n        var errors = response\n          .json()\n          .then((msg) => {\n            this.setState({\n              formLoading: false,\n              hasErrors: true,\n              formResponse: \"Email: \" + msg[\"email\"][0],\n            });\n          })\n          .catch((error) => {\n            alert(response.statusText);\n          });\n        throw Error(response);\n      }\n      this.fetchUsers();\n      this.setState({\n        formLoading: false,\n        hasErrors: false,\n        formResponse: \"User created successfully\",\n      });\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const user = new FormData(event.target);\n    if (!user.get(\"id\")) {\n      this.createUser(user);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Header toggleForm={this.toggleForm} />\n        <UserForm\n          user={this.state.formUser}\n          handleSubmit={this.handleSubmit}\n          isActive={this.state.formActive}\n          isLoading={this.state.formLoading}\n          hasErrors={this.state.hasErrors}\n          response={this.state.formResponse}\n        />\n        <UsersList loading={this.state.loading} users={this.state.users} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}